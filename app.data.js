module.exports = [
  {"filepath":"pages/01.index.md","title":"React Native Reanimated","description":"","link":"index","data":"# React Native Reanimated\n\nReact Native's Animated library 재구현.\n\n- **Native Performance**: JS에서 animation 코드를 선언하지만, native thread 에서 작동합니다.\n- **Precise Animations**: animation을 더욱 정밀하고, 새로운 수준의 컨트롤이 가능해진다.\n- **(mostly) Backwards Compatible**: React native animated의 기존 코드와 동일하게 사용가능합니다. 코드를 변경할 필요가 없습니다. 👍\n\nReanimated는 기존 Animated API보다 낮은 수준의 추상화를 통해, 훨씬 뛰어난, 유연성, 제어 및 퍼포먼스를 종합적으로 제공합니다. 그리고 [react-native-gesture-handler](https://github.com/kmagiera/react-native-gesture-handler) 제스처 기반하고 결합이 가능하다.\n\n## Want to contribute?\n\nHead over right [there](https://github.com/software-mansion/react-native-reanimated), we are open for your pull requests!\n\n## License\n\nReact native reanimated library is licensed under [The MIT License](https://github.com/software-mansion/react-native-reanimated/blob/master/LICENSE).\n\n## Credits\n\nThis project is supported by amazing people from [Expo.io](https://expo.io) and [Software Mansion](https://swmansion.com)\n\n[![expo](https://avatars2.githubusercontent.com/u/12504344?v=3&s=100 'Expo.io')](https://expo.io)\n[![swm](https://avatars1.githubusercontent.com/u/6952717?v=3&s=100 'Software Mansion')](https://swmansion.com)\n","type":"md","dependencies":[]},{"filepath":"pages/02.about.md","title":"About Reanimated","description":"","link":"about-reanimated","data":"# 동기\n\n---\n\n`Animated` 라이브러리는 여러가지 한계가 있다. gesture의 상호작용 관련된 몇가지 문제가 있다.\n이 프로젝트는 처음에는 screen에서 물체를 drag, snap를 하는 pan genture 상호작용 문제를 해결하기 위해 만들게 되었다.\n이문제는 `Animed.event` 를 box 위치에 제스처를 mapping 하고, `useNativeDriver`를 이용하여 UI thread를 상호작용하고 있음에도, 우리는 여전히 snap Animation을 실행하기 위해서, 다시 JS로 전환해야 한다.\n그 이유는 `Animated.spring({}).start()`를 선언 방식으로는 해결할 수 없기때문입니다. 왜냐하면 실행할 때, value를 업데이트 하는 `side effects`가 발생합니다.\n실행 모델에 animation 노드를 넣는 작업은 매우 어렵습니다. Animation API를 업데이트하기 위해서는 frame마다 종속되어야 합니다.\n우리는 필요이상으로 `side effects`를 이용하고 싶지 않습니다. 예를 들어서 animation이 여러번 실행되는 문제 등이 있습니다.\n\nKrzysztof는 `Animated`를 재설계하여, native driver에 \"Animated Tracking`을 넣는 영감(inspiration)을 하게 됩니다. 여전히, Native`Animated`라이브러리는 꽤 오랫동안 제공하고 있지 않습니다. 분명히, JS, Android 그리고 iOS 세 군데에 기능을 하나씩 넣어서 구축하는 것은 어렵다. 버그수정도 만찬가지이다. 우리 목표 중 하나는`react-native-reanimated`가 포괄적인 구성요소를 제공하여, JS에서만 보다 복잡한 기능을 구축하고, Native 코드베이스를 최대한 최소화 하는 것이다. \"diffClamp\"를 예를 들어보면, 3군데에`Animated` 코어에 구현되어 있고, 상당히 유용하지만, 실제로 쓰이는 케이스는 한 가지 뿐이다. ( collapsible scrollview header)\n\n비슷한 주제로 React Native's PR [#18029](https://github.com/facebook/react-native/pull/18029) 는 적당한 사용 사례가 있지만, 관리자들은 merge하는 것을 망설이고 있다.\n`Animated` API는 사람들이 이런 것을 만드는 것을 막으면 안된다. 우리의 목표는 `react-native-reanimated`는 더 낮은 수준의 접근을 가능하게 하고, 더많은 기능을 제공하는 것이다.\n\n해당 동기에 대한 영상을 Krzysztof Magiera's [React Europe talk](https://www.youtube.com/watch?v=kdq4z2708VM) 에서 볼 수 있다.\n\n목표:\n\n- More generic primitive node types leading to more code reuse for the library internals therefore making it easier to add new features and fix bugs.\n- 새로운 set의 base node를 `Animated` 에서 사용할 수 있도록 하는 것이다.\n  - \"diffClamp\" 같은 복잡한 노드\n  - 애니메이션 value 트랙킹이나 staggering 애니메이션 같은 상호작용\n- Conditional evaluation & nodes with side effects (`set`, `startClock`, `stopClock`).\n- 더이상 \"“useNativeDriver” 사용하지 않아도 된다. - 모든 애니메이션을 기본적으로 UI Thread에서 작동하게 하는 것이다.\n\n# Reanimated 개요\n\n우리의 이 프로젝트는 완벽하게 `Animated` API와 호환하게 하는 것이다. 우리가 선택한 set of base node들로 JS에서 코드를 작성하는 것만으로도 이 작업을 수행할 수 있어야 하며, 기본 코드베이스에 큰 변화가 필요하지 않다고 믿는다. 여기에는 오리지널 `Animated` 라이브러리에 포함되지 않은 것들이 있다.\n`Animated`에서 누락된 기능들이 `react-native-reanimated` 으로 구현할 수 있다. 구현방법이 다를 수 있지만, (e.g. check [\"Declarative Animation API\" section](declarative-animation-api.html) 에서 보고 구현하면 된다.\n\n- [ ] value offsets 사용\n- [ ] value 트랙킹 ( 다른 방법으로 사용할수 있다. `react-native-reanimated` 는 목표로 하는 params만 아니라, 모든 애니메이션의 매개변수를 추적할 수 있다. )\n- [ ] animation staggering\n- [ ] animation delays\n\n# 한번의 평가 ( 알고리즘 )\n\n하나의 frame에서 각 노드를 여러 차례 평가할 수 있었던 오리지널 `Animated`와 달리\n`react-native-reanimated` 는 한 프레임에서 한 번씩 평가하도록 제한하고 있다.\nside-effects가 있는 노드에는 제한이 필요하다. (e.g. [`set`](set.html) or [`startClock`](start-clock.html)).\nnode를 평가할 떄 (e.g. [`add`](add.html) 경우에 입력 노드의 합계를 얻으려고 함.) 값을 캐시한다. 다음 프레임 내에서 평가하는 대신에 cache된 값을 반환한다. 이러한 개념은 적은 수의 노드를 평가하려고 시도할 수 있기 때문에 성능 개선에 도움이 된다. 평가할 노드의 결정을 위한 알고리즘은 다음과 같다.\n\n1.  매 프레임에 대해 먼저 생성된 events를 우리는 분석한다.( 예 touch stream). event가 일부 애니메이션의 값을 업데이트 할수 있다.\n2.  그리고 나서, \"작동중인\" 노드에 대해서 [clock](clock-and-the-algorithm.html) 다음과 같이 업데이트 한다.\n3.  업데이트 노트에서 시작하여, 노드의 트리를 돌고, view에 연결된 최종 노드를 찾는다.\n4.  view 속성과 연결된 노드를 발견하면, 해당 노드를 평가한다. 이는 입력 노드 등에 대한 평가를 재귀적으로 트리거할 수 있다.\n5.  모든 것이 끝난 후, \"running\" 상태인지 확인한다. 만약 그렇다면 다음 프레임으로 평가될 콜백을 요청하고 다시 1번부터 다시 시작한다. 그렇지 않으면 아무것도 하지 않는다.\n\n# 100% 선언적 gesture 상호작용\n\n[Gesture Handler](https://kmagiera.github.io/react-native-gesture-handler) `react-native-reanimated` 와 가장 잘 어울리다. [ImagePreview app](https://github.com/software-mansion/react-native-reanimated/blob/master/Example/imageViewer)를 포함한 예시들은, 해당 라이브러리를 이용해서 만든다.\n","type":"md","dependencies":[]},{"filepath":"pages/03.start.md","title":"Getting Started","description":"","link":"getting-started","data":"# 시작하기\n\n---\n\n시작하기 전에 반드시 원래의 [Animated API](https://facebook.github.io/react-native/docs/animated.html) 에 익숙해져야 한다. \n애니메이션이 일반적으로 `Animated` 가 어떻게 animation을 만드는지 편하게 아는 것이 좋다. (Fun Fact: Reanimated는 'Animed API'와 역호환되기도 한다. 🙌)\n\n이 라이브러리가 존재하는 이유는 [Motivation](about-reanimated.html#Motivation---OMG,-why-would-you-build-this?) 참고 하기를 바란다.\n\n중요: 본 문서 전체에서 특별히 언급이 없는 한, 문서에서의 `Animated`는 `react-native`가 아니라 `react-native-reanimated`를 말하는 것이다.\n\n\n## 설치\n\nI. 첫번째로 yarn을 이용해서 npm 라이브러리를 설치:\n\n```bash\n  yarn add react-native-reanimated\n```\n\nII. `react-native` cli 와 연결:\n\n```bash\n  react-native link react-native-reanimated\n```\n\nIII. iOS에서는 , ios 폴더에 가서 `pod install`:\n\n```bash\n  cd ios\n  pod install\n```\n\nIV. `reanimated`를 사용하기 원하면 너의 프로젝트에서 `react-native-reanimated` 를 import 하기:\n\n```js\nimport Animated from 'react-native-reanimated';\n```\n\n이와 유사하게, `react-native` 가 아니라 `react-native-reanimated` 에서 `Easing`가 필요한 경우:\n\n```js\nimport Animated, { Easing } from 'react-native-reanimated';\n```\n\n## 테스팅\n\nJest와 함께 사용하려면, `react-native-reanimated` 상단에 다음과 같이mock 구현을 추가:\n\n```js\njest.mock('react-native-reanimated', () => require('react-native-reanimated/mock'));\n```\n","type":"md","dependencies":[]},{"filepath":"pages/04.transitions.md","title":"Transitions","description":"","link":"transitions","data":"# Transitions\n\n---\n\nTransitions은 실험적인 API이다. 화면 계층에서 2개의 상태 사이에의 애니메이션을 다루기 위해서 구현되어 있다.\n이것은 react native에 있는 `LayoutAnimation`하고 개념으로 비슷하다. 그러나 animation을 더 잘 컨트롤할 수 있게 해준다.\n\nTransitions는 2개의 메인 block을 구성 되어 있습니다. 첫 번째로 `Transitioning.View` 는 react-native view의 확장된 것이다. 그래서 `View props를  사용할 수 있다. `Transitioning.View` 는 모든 애니메이션의 root로써, children의 변화 범위를 넓히는데 사용된다. next transition을 활성화 하기 위해서는 \n`Transitioning.View`에 있는 `animateNextTransition()` 를 호출하면 된다.\n\n두 번쨰 메인 block은 transition을 정의하는 것이다. Transitioning API는 transition animation 어떻게 사용할지를 JSX 구문을 사용해서 정의한다.\n 모든 컴포넌트에 `Transition` 를 결합하여 애니메이션을 구현할 수 있다. transition 컴포넌트에 대한 설명은 아래 목록을 참조.\n\n\n## Transition groups\n\n아래의 컴포넌트의 set을 이용하여 transitions을 하나이상의 그룹으로 사용할수 있다. 또한 더 나은 효과를 위해서 transition 그룹을 중첩할 수도 있다.\n\n### `<Transition.Together>`\n\n이 구성 요소 아래에 중첩된 Transitions은 애니메이션 시작될 떄, 병렬(parallel)로 처리 된다.\n\n### `<Transition.Sequence>`\n\n이 구성 요소 아래에 중첩된 Transitions은 애니메이션 시작될 떄, 순차적(sequence)로 처리 된다.\n\n## Transitions\n\nTransition components들은 별도로 또는 그룹의 일부로 사용할 수 있다. 각 transition component는 애니메이션을 구성하는데 다음과 같은 공통 속성이 있습니다.\n\n#### `durationMs`\n\n애니메이션 실행시간(milliseconds)\n\n#### `delayMs`\n\n애니메이션을 지연시간( milliseconds )\n\n#### `interpolation`\n\ntransition timing 설정. `linear`, `easeIn`, `easeOut`, `easeInOut` 옵션만 가능하다.\n\n#### `propagation`\n\n프레임워크가 위치에 따라, set of different views에서 transitions을 자동으로 지연시킬 수 있다. 가능한 값은 `top`, `bottom`, `left`, `right` 이다.\n`propagation=\"top\"` 일 때, 이것의 의미는 animation을 시작할 첫번쨰 element가 `Transitioning.View` 컨테이너의 top에 가장 가까운 요소라는 뜻이다.\n다른 view들은 top 가장자리 거리에 양에 따라 지연될 것이다.\n\n\n### `<Transition.In>`\n\nAllows to specify how views that get mounted during animation transition get animated. In addition to the above parameters you can specify the type of animation using `type` prop. The possible values are: `fade`, `scale`, `slide-top`, `slide-bottom`, `slide-left`, `slide-right`.\n\n### `<Transition.Out>`\n\nAllows to specify how the framework should animate views that are being removed during transition. In addition to the above parameters you can specify the type of animation using `type` prop. The possible values are: `fade`, `scale`, `slide-top`, `slide-bottom`, `slide-left`, `slide-right`.\n\n### `<Transition.Change>`\n\nUse `Transition.Change` component to specify how components' which properties get changed during transition should be animated. The framework currently supports an animating position, bounds and transforms.\n\n## How to use it\n\nThis API is still experimental and is a subject to change. Please refer to our [Example app](https://github.com/software-mansion/react-native-reanimated/tree/master/Example/transitions) to see how it can be used in practice in the current shape.\n","type":"md","dependencies":[]},{"filepath":"pages/05.value.md","title":"Value","description":"","link":"value","data":"# Value\n\n---\n\n`Animated.Value` is a container for storing values. It's is initialized with `new Value(0)` constructor. For backward compatibility there are provided API for setting value after it has been initialized:\n\n```js\nconst v = new Value(0);\n/// ...\nv.setValue(100);\n```\n","type":"md","dependencies":[]},{"filepath":"pages/06.clock.md","title":"Clock and the algorithm","description":"","link":"clock-and-the-algorithm","data":"# Clocks\n\n---\n\nOriginal `Animated` API makes an \"animation\" object a first class citizen.\n`Animation` object has many features and therefore requires quite a few JS<>Native bridge methods to be managed properly.\nIn `react-native-reanimated`, clocks aim to replace that by providing more of a low level abstraction but also since clock nodes behave much like the animated values they make the implementation much less complex.\n\n`Animated.Clock` node is a special type of `Animated.Value` that can be updated in each frame to the timestamp of the current frame. When we take `Clock` node as an input, the value it returns is the current frame timestamp in milliseconds. Using special methods, clock nodes can be stopped and started and we can also test if clock has been started.\n\nBecause `Animated.Clock` just extends the `Animated.Value` you can use it in the same places (operations) where you can pass any type of animated node.\n","type":"md","dependencies":[]},{"filepath":"pages/07.block.md","title":"Block","description":"","link":"block","data":"# Blocks\n\n---\n\nBlocks are just arrays of nodes that are being evaluated in a particular order and return the value of the last node. It can be created using `block` command but also when passed as an argument to other nodes the `block` command can be omitted and we can just pass a nodes array directly. See an example below:\n\n```js\nblock(\n  set(tmp, a), \n  set(a, b), \n  set(b, tmp)\n);\n```\n\nPassing array directly is equivalent to wrapping it with the `block` command.\n","type":"md","dependencies":[]},{"filepath":"pages/08.view.md","title":"Views, props, etc","description":"","link":"views--props--etc","data":"# Views, props, etc\n\n---\n\nFollow the original `Animated` library guides to learn how values can be connected to View attributes.\nSimilarly with `react-native-reanimated` you need to use components prefixed with `Animated.` (remember to [import](getting-started.html#installation) `Animated` from reanimated package). For example:\n\n```js\nimport Animated from 'react-native-reanimated';\n\n// use\n<Animated.View/>\n// instead of\n<View/>\n```\n","type":"md","dependencies":[]},{"filepath":"pages/09.code.md","title":"Animated.Code","description":"","link":"animated-code","data":"# `Animated.Code`\n\n---\n\n`Animated.Code` component allows you to define reanimated nodes that you want to execute when their input nodes updates, but aren't necessarily strictly related to some view properties and hence it does not feel right to place them under `translate` or other prop of an `Animated.View`. This component renders `null`, so you can place it in any place you want in your render method. It is required that your code is put inside component as we rely on `componentDidMount` and `componentWillUnmount` callbacks to install and cleanup animated nodes. Note that the code you put is going to be executed only once. We currently have no way of telling if your code changes and so it will only be run in `componentDidMount`. If you wish for your reanimated nodes to be updated when the component updates, you can update the `key` property of the `Animated.Code` component, which will effectively unmount old and mount new versions of it in the React tree.\n\n```js\n<Animated.Code>\n  {() =>\n    block([\n      set(this.transX1, add(multiply(-1, this._transX))),\n      set(this.transX2, add(multiply(-2, this._transX), 120)),\n      set(this.transX3, sub(multiply(2, this._transX), 120)),\n      set(this.transX4, add(multiply(1, this._transX))),\n    ])\n  }\n</Animated.Code>\n```\n\nor:\n\n```js\n<Animated.Code\n  exec={block([\n    set(this.transX1, add(multiply(-1, this._transX))),\n    set(this.transX2, add(multiply(-2, this._transX), 120)),\n    set(this.transX3, sub(multiply(2, this._transX), 120)),\n    set(this.transX4, add(multiply(1, this._transX))),\n  ])}\n/>\n```\n\n## `Animated.useCode`\n\nThe `useCode` hook acts as an alternative to the `Animated.Code` component.\n\n```js\nAnimated.useCode(\n    () => Node | Node[] | boolean | null | undefined, \n    [...dependencies]\n)\n```\n\nIt's passed as 1st parameter a factory function that should return an optional animated node, or array of nodes (which will be then placed in a `block` node), and as 2nd parameter, an array of dependencies. It will update that node, both when the component mounts and every time a value in that array changes. It does nothing on versions of React Native that don't support hooks (<0.59).\n\n```js\nconst [animated, setAnimated] = React.useState(false);\nconst [offset, setOffset] = React.useState(20);\n\nAnimated.useCode(\n    () => (\n          animated && [\n              //...\n              set(transX1, add(_transX, offset))\n          ]\n    ), \n    [animated, offset]\n);\n```\n\nWe recommend to use `useCode()` with the `react-hooks/exhaustive-deps` [eslint rule](https://www.npmjs.com/package/eslint-plugin-react-hooks).\n","type":"md","dependencies":[]},{"filepath":"pages/10.event.md","title":"Event handling with reanimated nodes","description":"","link":"event-handling-with-reanimated-nodes","data":"# Event handling with reanimated nodes\n\n---\n\n`react-native-reanimated`'s new syntax is possible to be used with `Animated.event`. Instead of providing only a mapping from event fields to animated nodes, it is allowed to write a function that takes reanimated values map as an input and return a block (or any other reanimated function) that will be then used to handle the event.\n\nThis syntax allows for providing some post-processing for the event data that does not fit well as a dependency of other nodes we connect to `Animated.View` component props.\n[See example](https://github.com/software-mansion/react-native-reanimated/blob/master/Example/PanRotateAndZoom/index.js)\n\n```js\nthis.onGestureEvent = event([\n  {\n    nativeEvent: {\n      translationX: x => set(this._x, x),\n    },\n  },\n]);\n```\n\nIf you'd like to use more than one event attribute in your reanimated code, this is also supported. Instead of defining event handler methods for a single attribute you can define at the level of `nativeEvent`. Here is an example that takes both translation attributes and state attribute from `PanGestureHandler` event:\n\n```js\n<PanGestureHandler\n  onGestureEvent={event([\n    {\n      nativeEvent: ({ translationX: x, translationY: y, state }) =>\n        block([\n          set(this._transX, add(x, offsetX)),\n          set(this._transY, add(y, offsetY)),\n          cond(eq(state, State.END), [\n            set(this.offsetX, add(this.offsetX, x)),\n            set(this.offsetY, add(this.offsetY, y)),\n          ]),\n        ]),\n    },\n  ])}>\n  <Animated.View\n    style={{\n      transform: [{ translateX: this._transX, translateY: this._transY }],\n    }}\n  />\n</PanGestureHandler>\n```\n","type":"md","dependencies":[]},{"filepath":"pages/11.baseNodes/abs.md","title":"abs","description":"","link":"abs","data":"## `abs`\n\n```js\nabs(node);\n```\n\nEvaluates the given node and returns an absolute value of the node's value.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/acc.md","title":"acc","description":"","link":"acc","data":"## `acc`\n\n```js\nacc(node);\n```\n\nReturns an accumulated value of the given node. This node stores a sum of all evaluations of the given node and each time it gets evaluated it would add current node's value to that sum and return it.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/acos.md","title":"acos","description":"","link":"acos","data":"## `acos`\n\n```js\nacos(node);\n```\n\nReturns a arc-cosine of the value in radians of the given node\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/add.md","title":"add","description":"","link":"add","data":"## `add`\n\n```js\nadd(nodeOrNumber1, nodeOrNumber2, ...)\n```\n\nTakes two or more animated nodes or values, and when evaluated, returns their sum.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/and.md","title":"and","description":"","link":"and","data":"## `and`\n\n```js\nand(nodeOrValue1, ...)\n```\n\nActs as a logical `AND` operator. Takes one or more nodes as an input and evaluates them in sequence until some node evaluates to a \"falsy\" value. Then returns that value and stops evaluating further nodes. If all nodes evaluate to a \"truthy\" it returns the last node's value.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/asin.md","title":"asin","description":"","link":"asin","data":"## `asin`\n\n```js\nasin(node);\n```\n\nReturns a arc-sine of the value in radians of the given node\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/atan.md","title":"atan","description":"","link":"atan","data":"## `atan`\n\n```js\natan(node);\n```\n\nReturns a arc-tangent of the value in radians of the given node\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/block.md","title":"block","description":"","link":"block","data":"## `block`\n\n```js\nblock([node1, ...])\n```\n\nTakes an array of nodes and evaluates all of them in the order they are put in the array. It then returns the value of the last node.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/call.md","title":"call","description":"","link":"call","data":"## `call`\n\n```js\ncall(argsNodes, callback);\n```\n\nIf one of the nodes from `argsNodes` array updates, `callback` will be called in JavaScript with a list of current values of nodes from `argsNodes` array as the first argument.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/ceil.md","title":"ceil","description":"","link":"ceil","data":"## `ceil`\n\n```js\nceil(node);\n```\n\nReturns a node that rounds a number up to its nearest integer. If the passed argument is an integer, the value will not be rounded.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/clockRunning.md","title":"clockRunning","description":"","link":"clock-running","data":"## `clockRunning`\n\n```js\nclockRunning(clockNode);\n```\n\nFor a given `Clock` node, it returns `1` if the clock [has been started](start-clock.html) (if it's updating each frame) or returns `0` otherwise.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/color.md","title":"color","description":"","link":"color","data":"## `color`\n\n```js\ncolor(red, green, blue, alpha);\n```\n\nCreates a color node in RGBA format, where the first three input nodes should have _integer_ values in the range 0-255 (consider using `round` node if needed) and correspond to color components Red, Green and Blue respectively. Last input node should have a value between 0 and 1 and represents alpha channel (value `1` means fully opaque and `0` completely transparent). Alpha parameter can be ommited, then `1` (fully opaque) is used as a default.\n\nThe returned node can be mapped to view properties that represents color (e.g. [`backgroundColor`](https://facebook.github.io/react-native/docs/view-style-props.html#backgroundcolor)).\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/concat.md","title":"concat","description":"","link":"concat","data":"## `concat`\n\n```js\nconcat(nodeOrValue1, ...)\n```\n\nReturns concatanation of given nodes (number or string) as string\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/cond.md","title":"cond","description":"","link":"cond","data":"## `cond`\n\n```js\ncond(conditionNode, ifNode, [elseNode]);\n```\n\nIf `conditionNode` evaluates to \"truthy\" value the node evaluates `ifNode` node and returns its value, otherwise it evaluates `elseNode` and returns its value. `elseNode` is optional.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/cos.md","title":"cos","description":"","link":"cos","data":"## `cos`\n\n```js\ncos(node);\n```\n\nReturns a cosine of the value (in radians) of the given node\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/debug.md","title":"debug","description":"","link":"debug","data":"## `debug`\n\n```js\ndebug(messageString, valueNode);\n```\n\nWhen the node is evaluated, it prints a string that contains the `messageString` concatenated with the value of `valueNode`. This then returns the value of `valueNode`. Logs are printed in the JS debugger if it's attached, in console if Expo client is being used, or else in the native console. Logs are visible only in `DEV` mode and have no effect on production builds. Note that `messageString` should be a normal string, not an animated node.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/defined.md","title":"defined","description":"","link":"defined","data":"## `defined`\n\n```js\ndefined(node);\n```\n\nReturns `1` if the given node evaluates to a \"defined\" value (that is to something that is non-null, non-undefined and non-NaN). Returns `0` otherwise.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/diff.md","title":"diff","description":"","link":"diff","data":"## `diff`\n\n```js\ndiff(node);\n```\n\nEvaluates node and returns a difference between value returned at the last time it was evaluated and its value at the current time. When evaluating for the first time it returns the node's value.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/diffClamp.md","title":"diffClamp","description":"","link":"diff-clamp","data":"## `diffClamp`\n\nWorks the same way as with the original `Animated` library.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/divide.md","title":"divide","description":"","link":"divide","data":"## `divide`\n\n```js\ndivide(nodeOrNumber1, nodeOrNumber2, ...)\n```\n\nTakes two or more animated nodes or values, and when evaluated, returns the result of dividing their values in the exact order.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/eq.md","title":"eq","description":"","link":"eq","data":"## `eq`\n\n```js\neq(nodeOrValueA, nodeOrValueB);\n```\n\nReturns `1` if the value of both nodes are equal. Otherwise returns `0`.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/event.md","title":"event","description":"","link":"event","data":"## `event`\n\nWorks the same way as with the original `Animated` library.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/exp.md","title":"exp","description":"","link":"exp","data":"## `exp`\n\n```js\nexp(node);\n```\n\nReturns an exponent of the value of the given node.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/floor.md","title":"floor","description":"","link":"floor","data":"## `floor`\n\n```js\nfloor(node);\n```\n\nReturns a node that rounds a number down to its nearest integer. If the passed argument is an integer, the value will not be rounded.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/greaterOrEq.md","title":"greaterOrEq","description":"","link":"greater-or-eq","data":"## `greaterOrEq`\n\n```js\ngreaterOrEq(nodeOrValueA, nodeOrValueB);\n```\n\nReturns `1` if the value of the first node is greater or equal to the value of the second node. Otherwise returns `0`.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/greaterThan.md","title":"greaterThan","description":"","link":"greater-than","data":"## `greaterThan`\n\n```js\ngreaterThan(nodeOrValueA, nodeOrValueB);\n```\n\nReturns `1` if the value of the first node is greater than the value of the second node. Otherwise returns `0`.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/interpolate.md","title":"interpolate","description":"","link":"interpolate","data":"## `interpolate`\n\n```js\ninterpolate(node, {\n  // Input range for the interpolation. Should be monotonically increasing.\n  inputRange: [nodeOrValue...],\n  // Output range for the interpolation, should be the same length as the input range.\n  outputRange: [nodeOrValue...],\n  // Sets the left and right extrapolate modes.\n  extrapolate?: Extrapolate.EXTEND | Extrapolate.CLAMP | Extrapolate.IDENTITY,\n  // Set the left extrapolate mode, the behavior if the input is less than the first value in inputRange.\n  extrapolateLeft?: Extrapolate.EXTEND | Extrapolate.CLAMP | Extrapolate.IDENTITY,\n  // Set the right extrapolate mode, the behavior if the input is greater than the last value in inputRange.\n  extrapolateRight?: Extrapolate.EXTEND | Extrapolate.CLAMP | Extrapolate.IDENTITY,\n})\n\nExtrapolate.EXTEND; // Will extend the range linearly.\nExtrapolate.CLAMP; // Will clamp the input value to the range.\nExtrapolate.IDENTITY; // Will return the input value if the input value is out of range.\n```\n\nMaps an input value within a range to an output value within a range. Also supports different types of extrapolation for when the value falls outside the range and mapping to strings. For example, if you wanted to animate a rotation you could do:\n\n```js\nconcat(\n  interpolate(node, { inputRange: [0, 360], outputRange: [0, 360] }),\n  'deg'\n);\n```\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/lessOrEq.md","title":"lessOrEq","description":"","link":"less-or-eq","data":"## `lessOrEq`\n\n```js\nlessOrEq(nodeOrValueA, nodeOrValueB);\n```\n\nReturns `1` if the value of the first node is less or equal to the value of the second node. Otherwise returns `0`.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/lessThan.md","title":"lessThan","description":"","link":"less-than","data":"## `lessThan`\n\n```js\nlessThan(nodeOrValueA, nodeOrValueB);\n```\n\nReturns `1` if the value of the first node is less than the value of the second node. Otherwise returns `0`.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/log.md","title":"log","description":"","link":"log","data":"## `log`\n\n```js\nlog(nodeOrNumber);\n```\n\nThe log of the given node.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/max.md","title":"max","description":"","link":"max","data":"## `max`\n\n```js\nmax(nodeOrValue1, nodeOrValue2);\n```\n\nTakes two nodes as an input and returns a maximum of all the node's values.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/min.md","title":"min","description":"","link":"min","data":"## `min`\n\n```js\nmin(nodeOrValue1, nodeOrValue2);\n```\n\nTakes two nodes as an input and returns a minimum of all the node's values.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/modulo.md","title":"modulo","description":"","link":"modulo","data":"<!-- TODO - need to explain -->\n\n## `modulo`\n\n```js\nmodulo(nodeOrNumber, nodeOrNumber);\n```\n\nRemainder after division of the first argument by the second one. modulo(a,0) will throw an error.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/multiply.md","title":"multiply","description":"","link":"multiply","data":"## `multiply`\n\n```js\nmultiply(nodeOrNumber1, nodeOrNumber2, ...)\n```\n\nTakes two or more animated nodes or values, and when evaluated, returns the result of multiplying their values in the exact order.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/neq.md","title":"neq","description":"","link":"neq","data":"## `neq`\n\n```js\nneq(nodeOrValueA, nodeOrValueB);\n```\n\nReturns `1` if the value of the first node is not equal to the value of the second node. Otherwise returns `0`.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/not.md","title":"not","description":"","link":"not","data":"## `not`\n\n```js\nnot(node);\n```\n\nReturns `1` if the given node evaluates to a \"falsy\" value and `0` otherwise.\n\n<!-- Derived -->\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/onChange.md","title":"onChange","description":"","link":"on-change","data":"## `onChange`\n\n```js\nonChange(value, action);\n```\n\nWhen evaluated, it will compare `value` to its previous value. If it has changed, `action` will be evaluated and its value will be returned.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/or.md","title":"or","description":"","link":"or","data":"## `or`\n\n```js\nor(nodeOrValue1, ...)\n```\n\nActs as a logical `OR` operator. Takes one or more nodes as an input and evaluates them in sequence until some node evaluates to a \"truthy\" value. Then returns that value and stops evaluating further nodes. If all nodes evaluate to a \"falsy\" value it returns the last node's value.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/pow.md","title":"pow","description":"","link":"pow","data":"## `pow`\n\n```js\npow(nodeOrNumber1, nodeOrNumber2, ...)\n```\n\nTakes two or more animated nodes or values, and when evaluated, returns the result of first node to the second node power. If more than two nodes are present, the result from the previous step is used as a base and the third node as exponent. This process continues onward for the following nodes if these are present.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/proc.md","title":"proc","description":"","link":"proc","data":"## `proc`\n\nReturns a callable function node that can be used to define expressions that can be called from other nodes.\n\nExample:\n\n```js\n// Global constant\nconst myProc = proc((a, b) => multiply(a, b));\n\n// In your component\nconst style = { width: myProc(10, 10) };\n```\n\nA proc node should be declared as a global constant in your code and not recreated from inside components.\n\nIt is not possible to reference nodes that are not passed as parameters.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/round.md","title":"round","description":"","link":"round","data":"## `round`\n\n```js\nround(node);\n```\n\nReturns a node that rounds input value to the nearest integer.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/set.md","title":"set","description":"","link":"set","data":"## `set`\n\n```js\nset(valueToBeUpdated, sourceNode);\n```\n\nWhen evaluated, it will assign the value of `sourceNode` to the `Animated.Value` passed as a first argument. In other words, it performs an assignment operation from the `sourceNode` to `valueToBeUpdated` value node and also returns a node that represents this value.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/sin.md","title":"sin","description":"","link":"sin","data":"## `sin`\n\n```js\nsin(node);\n```\n\nReturns a sine of the value (in radians) of the given node.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/sqrt.md","title":"sqrt","description":"","link":"sqrt","data":"<!- TODO - need to explain -->\n\n## `sqrt`\n\n```js\nsqrt(nodeOrNumber);\n```\n\nThe square root of the given node. If the number is negative, an error is thrown.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/startClock.md","title":"startClock","description":"","link":"start-clock","data":"## `startClock`\n\n```js\nstartClock(clockNode);\n```\n\nWhen evaluated, it will make `Clock` node passed as an argument start updating its value each frame. Then returns `0`.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/stopClock.md","title":"stopClock","description":"","link":"stop-clock","data":"## `stopClock`\n\n```js\nstopClock(clockNode);\n```\n\nWhen evaluated, it will make `Clock` node passed as an argument stop updating its value (if it has been doing that). Then returns `0`.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/sub.md","title":"sub","description":"","link":"sub","data":"## `sub`\n\n```js\nsub(nodeOrNumber1, nodeOrNumber2, ...)\n```\n\nTakes two or more animated nodes or values, and when evaluated, returns the result of subtracting their values in the exact order.\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/11.baseNodes/tan.md","title":"tan","description":"","link":"tan","data":"## `tan`\n\n```js\ntan(node);\n```\n\nReturns a tangent of the value in radians of the given node\n","type":"md","dependencies":[],"group":"Base Nodes"},{"filepath":"pages/12.animations/decay.md","title":"decay","description":"","link":"decay","data":"## `decay`\n\n```js\ndecay(clock, { finished, velocity, position, time }, { deceleration });\n```\n\nUpdates `position` and `velocity` nodes by running a single step of animation each time this node evaluates. State variable `finished` is set to `1` when the animation gets to the final point (that is the velocity drops under the level of significance). The `time` state node is populated automatically by this node and refers to the last clock time this node got evaluated. It is expected to be reset each time we want to restart the animation. Decay animation can be configured using `deceleration` config param and it controls how fast the animation decelerates. The value should be between `0` and `1` but only values that are close to `1` will yield meaningful results.\n","type":"md","dependencies":[],"group":"Animations"},{"filepath":"pages/12.animations/spring.md","title":"spring","description":"","link":"spring","data":"## `spring`\n\n```js\nspring(\n  clock,\n  { finished, position, velocity, time },\n  {\n    damping,\n    mass,\n    stiffness,\n    overshootClamping,\n    restSpeedThreshold,\n    restDisplacementThreshold,\n    toValue,\n  }\n);\n```\n\nWhen evaluated, updates `position` and `velocity` nodes by running a single step of spring based animation. Check the original `Animated` API docs to learn about the config parameters like `damping`, `mass`, `stiffness`, `overshootClamping`, `restSpeedThreshold` and `restDisplacementThreshold`. The `finished` state updates to `1` when the `position` reaches the destination set by `toValue`. The `time` state variable also updates when the node evaluates and it represents the clock value at the time when the node got evaluated for the last time. It is expected that `time` variable is reset before spring animation can be restarted.\n","type":"md","dependencies":[],"group":"Animations"},{"filepath":"pages/12.animations/springUtils.md","title":"springUtils","description":"","link":"spring-utils","data":"## `SpringUtils`\n\nFor developers' convenience, it's possible to use a different way of configuring `spring` animation which follows behavior known from React Native core.\n\n### `SpringUtils.makeDefaultConfig()`\n\nReturns an object filled with default config of animation:\n\n```js\n {\n   stiffness: new Value(100),\n   mass: new Value(1),\n   damping: new Value(10),\n   overshootClamping: false,\n   restSpeedThreshold: 0.001,\n   restDisplacementThreshold: 0.001,\n   toValue: new Value(0),\n }\n```\n\n### `SpringUtils.makeConfigFromBouncinessAndSpeed(prevConfig)`\n\nTransforms an object with `bounciness` and `speed` params into config expected by the `spring` node. `bounciness` and `speed` might be nodes or numbers.\n\n### `SpringUtils.makeConfigFromOrigamiTensionAndFriction(prevConfig)`\n\nTransforms an object with `tension` and `friction` params into config expected by the `spring` node. `tension` and `friction` might be nodes or numbers.\n\nSee an [Example of different configs](https://github.com/software-mansion/react-native-reanimated/blob/master/Example/differentSpringConfigs/index.js).\n","type":"md","dependencies":[],"group":"Animations"},{"filepath":"pages/12.animations/timing.md","title":"timing","description":"","link":"timing","data":"## `timing`\n\n```js\ntiming(\n  clock,\n  { finished, position, frameTime, time },\n  { toValue, duration, easing }\n);\n```\n\nUpdates `position` node by running timing based animation from a given position to a destination determined by `toValue`. The animation is expected to last `duration` milliseconds and use `easing` function that could be set to one of the nodes exported by the `Easing` object.\nThe `frameTime` node will also get updated and represents the progress of animation in milliseconds (how long the animation has lasted so far), similar to the `time` node that just indicates the last clock time the animation node has been evaluated. Both of these variables are expected to be reset before restarting the animation. Finally `finished` node will be set to `1` when the position reaches the final value or when `frameTime` exceeds `duration`.\n","type":"md","dependencies":[],"group":"Animations"},{"filepath":"pages/13.declarative.md","title":"Declarative Animation API","description":"","link":"declarative-animation-api","data":"# Declarative Animation API\n\n---\n\nInvoking animation differs from the way it is done when using the original `Animated` API.\nHere, instead of having animation objects we operate on nodes that can perform single animation steps.\nIn order to map an animation into a value, we will make the value to be assigned to a node that among few other things will call into the animation step node. Check [`timing`](timing.html), [`decay`](decay.html) and [`spring`](spring.html) nodes documentation for some details about how animation step nodes can be configured.\n\nThe example below shows a component that renders:\n\n```js\nimport Animated, { Easing } from 'react-native-reanimated';\n\nconst {\n  Clock,\n  Value,\n  set,\n  cond,\n  startClock,\n  clockRunning,\n  timing,\n  debug,\n  stopClock,\n  block,\n} = Animated;\n\nfunction runTiming(clock, value, dest) {\n  const state = {\n    finished: new Value(0),\n    position: new Value(0),\n    time: new Value(0),\n    frameTime: new Value(0),\n  };\n\n  const config = {\n    duration: 5000,\n    toValue: new Value(0),\n    easing: Easing.inOut(Easing.ease),\n  };\n\n  return block([\n    cond(\n      clockRunning(clock),\n      [\n        // if the clock is already running we update the toValue, in case a new dest has been passed in\n        set(config.toValue, dest),\n      ],\n      [\n        // if the clock isn't running we reset all the animation params and start the clock\n        set(state.finished, 0),\n        set(state.time, 0),\n        set(state.position, value),\n        set(state.frameTime, 0),\n        set(config.toValue, dest),\n        startClock(clock),\n      ]\n    ),\n    // we run the step here that is going to update position\n    timing(clock, state, config),\n    // if the animation is over we stop the clock\n    cond(state.finished, debug('stop clock', stopClock(clock))),\n    // we made the block return the updated position\n    state.position,\n  ]);\n}\n\nexport class AnimatedBox extends Component {\n  // we create a clock node\n  clock = new Clock();\n  // and use runTiming method defined above to create a node that is going to be mapped\n  // to the translateX transform.\n  transX = runTiming(this.clock, -120, 120);\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <Animated.View\n          style={[styles.box, { transform: [{ translateX: this.transX }] }]}\n        />\n      </View>\n    );\n  }\n}\n```\n\n## Backward compatible API\n\nAs it might sometimes be impractical to use the API above, there's an alternative way of invoking animation, which is similar to the original `Animated` API.\n\n```js\nclass Example extends Component {\n  constructor(props) {\n    super(props);\n    this._transX = new Value(0);\n    this._config = {\n      duration: 5000,\n      toValue: 120,\n      easing: Easing.inOut(Easing.ease),\n    };\n    this._anim = timing(this._transX, this._config);\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <Animated.View\n          style={[styles.box, { transform: [{ translateX: this._transX }] }]}\n        />\n        <Button\n          onPress={() => {\n            this._anim.start();\n          }}\n          title=\"Start\"\n        />\n      </View>\n    );\n  }\n}\n```\n\nThis API gives the possibility to use animation with original `Animated` API. It's also a way of running animation on some interaction without necessity or rerendering view.\n","type":"md","dependencies":[]},{"filepath":"pages/15.example.md","title":"Examples","description":"","link":"examples","data":"# Examples\n\n---\n\nThe source code for the example (showcase) app is under the [`Example/`](https://github.com/software-mansion/react-native-reanimated/blob/master/Example/) directory.\n\nIn order to run it you need to run those commands (starting at main directory):\n\n```bash\n  yarn\n  cd Example\n  yarn\n  cd ios && pod install && cd .. # if using IOS devices\n  yarn start\n```\n\nThen run `react-native run-android` or `react-native run-ios` (depending on which platform you want to run the Example app on).\n\nYou will need to have an Android or iOS device or emulator connected as well as `react-native-cli` package installed globally.\n","type":"md","dependencies":[]}
]